/*

codé pour la compétition robAfis 2012 pour l'équipe 7robot de l'N7.
Le robot sait :
- utiliser les moteurs
- utiliser les capteurs
- suivre une ligne pendant un certain temps
- gérer (monter et descendre) la pince
- afficher les valeurs des capteurs sur l'écran pour le debug
- afficher des erreurs sur l'écran pour le debug
- avancer (ou reculer) pendant un certain temps sans se soucier des lignes.
- s'arrêter

Le robot ne sait pas encore :
- reculer en suivant une ligne pendant un certain temps
- suivre une ligne (en avancant ou en reculant) jusqu'à ce que l'on arrive sur un carrefour puis s'arrêter
- avancer en suivant une ligne juqu'à une certaine distance d'un mur
- avancer jusqu'à ce qu'il rencontre une ligne
- chercher une ligne
- détecter un obstacle
- détecter la couleur d'une intersection
- se repérer sur le plateau (connaitre son emplacement) actuel
- faire demi-tour
- tourner à une intersection

Le robot ne saura sans doute jamais :
- détecter les pièces
- savoir si il a réussi à prendre les pièces ou non
- savoir si il a réussi à poser les pièces au bon endroit au non

Le langage utilisé est le nxc "Not eXactly C" très proche du C.
Quelques ajouts/différences par rapport au C :
 - type bool
 - type string
 - Wait au lieu de sleep
 - mot clef task
 - plusieurs fonctions de la bibiothèque C standard sont inconnues (par exemple sprintf)
 - les pointeurs n'existent pas ...??????????
 - les références existent.

 - Toutes les fontions utilisables sont documentées ici :
 http://bricxcc.sourceforge.net/nbc/nxcdoc/nxcapi/
*/


#include "main.h"

#define CAPTEUR_CONTACT     IN_1
#define CAPTEUR_VISUEL      IN_2
#define CAPTEUR_ULTRA       IN_4

#define MOTEUR_GAUCHE       OUT_A
#define MOTEUR_DROIT        OUT_B
#define PINCE               OUT_C

#define INFINI              3600000     // une heure
#define MAX                 100         // 100%
#define MIN                 0           // 0%
#define ANGLE_PINCE         40
#define NOIR                10
#define BLANC               50


/*
Capteur rouge :
50      -> 10
blanc   -> noir


*/

task main()
{
    initialiseCapteurs();
    attendDepart();
    Precedes(arretDurgence, afficheCapteurs, demarre);
    // Precedes permet de lancer plusieurs tâches en pseudo parallèle.
    bool test;
    /*demarre();
    vaChercherPetit();
    ramene();
    vaChercherGrand();
    ramene();
    rentre();
    char test[10];
    int d =3;
    strlen("test=%d");*/
}
void demarre()
{
    int duree = 3000;
    descendPince(ANGLE_PINCE);
    suitLaLigneEnAvancant(duree, MAX);
    stopMoteur();
    remontePince(ANGLE_PINCE);

    //suitLaLigne(duree, -MAX);
    //suitLaLigne(duree, MAX);
    Wait(2000);
    descendPince(ANGLE_PINCE);
    Wait(1000);
    suitLaLigneEnReculant(duree, MAX);
    stopMoteur();
    remontePince(ANGLE_PINCE);
    StopAllTasks();
}
void stopMoteur()
{

    tourne(MOTEUR_GAUCHE, MAX);
}
task arretDurgence()
{
	while(true)
	{
	    int valeurContact = Sensor(CAPTEUR_CONTACT);
		if(valeurContact)
			StopAllTasks();
	}
}
void afficheCapteurs()
{
    int valeurUltra = SensorUS(CAPTEUR_ULTRA);
    int valeurContact = Sensor(CAPTEUR_CONTACT);
    int valeurVisuel =  Sensor(CAPTEUR_VISUEL);

    TextOut(0, LCD_LINE2, "capteur de contact : ");
    TextOut(0, LCD_LINE4, "capteur ultrasons : ");
    TextOut(0, LCD_LINE6, "capteur visuel : ");

    NumOut(20, LCD_LINE3, valeurContact);
    NumOut(20, LCD_LINE5, valeurUltra);
    NumOut(20, LCD_LINE7, valeurVisuel);
}
void attendDepart()
{
    while(!Sensor(CAPTEUR_CONTACT))
        Wait(10);
    while(Sensor(CAPTEUR_CONTACT))
        Wait(10);

}
void remontePince(int valeur)
{
    RotateMotor(PINCE, 30, valeur);
}
void descendPince(int valeur)
{
    remontePince(-valeur);
}
void avancePendant(int temps, int puiss)
{
    tourne(MOTEUR_DROIT, puiss);
    tourne(MOTEUR_GAUCHE, puiss);
    Wait(temps);
    Stop(MOTEUR_DROIT);
    Stop(MOTEUR_GAUCHE);
}
void arrete(byte moteur)
{
    tourne(moteur, MIN);
}
void reculePendant(int temps, int puiss)
{
    avancePendant(temps, -puiss);
}
int suitLaLigne(int temps, int vitesse, bool enAvancant) // à droite de la ligne
{
    int tempsDepart = CurrentTick();
    int tempsPasse = 0;
    int valeurVisuel;
    /*Capteur rouge :
50      -> 10
blanc   -> noir
*/
// suit la ligne à droite
    int valeurGauche = 25; // proche du noir
    int valeurDroite = 35; // proche du blanc
    if(!enAvancant)
    {
        vitesse = -vitesse;
    }
    tourne(MOTEUR_DROIT, vitesse);
    tourne(MOTEUR_GAUCHE, vitesse);
    while(tempsPasse < temps)
    {
        afficheErreurInt(tempsPasse);
        valeurVisuel =  Sensor(CAPTEUR_VISUEL);
        if(valeurVisuel <= valeurDroite && valeurVisuel >= valeurGauche)
        {
            tourne(MOTEUR_DROIT, vitesse);
            tourne(MOTEUR_GAUCHE, vitesse);
        }
        else if (valeurVisuel < valeurGauche) // On est à gauche, le moteur droit ralentit
        {
            int vitesseCalculee = vitesse * 2 * ((valeurVisuel - NOIR)/(valeurGauche-NOIR));
            // On doit avoir
            /*
            valeurGauche - truc1 / truc2 = 1
            et NOIR - truc1 /truc2 = -1
            // Je résoudrai ca demain


            */
            tourne(MOTEUR_DROIT, vitesseCalculee);
        }
        else if (valeurVisuel > valeurDroite) // On est à droite, le moteur gauche ralentit
        {
            tourne(MOTEUR_GAUCHE, vitesse * ((BLANC - valeurVisuel)/(BLANC-valeurDroite)));
        }
        if(valeurVisuel < (NOIR+2) || valeurVisuel > (BLANC-2))
            afficheErreur("perte de la ligne");

        tempsPasse = CurrentTick() - tempsDepart;
    }
    stopMoteur();

}
int suitLaLigneEnAvancant(int temps, int vitesse) // à droite de la ligne
{






}
int suitLaLigneEnReculant(int temps, int vitesse) // à droite de la ligne
{


}
void afficheErreur(string erreur)
{
    TextOut(0, LCD_LINE8, erreur);
}
void afficheErreurInt(int erreur)
{
    NumOut(0, LCD_LINE8, erreur);
}
void tourne(byte moteur, int puiss)
{
    OnFwd(moteur, puiss);
}
void vaChercherPetit()
{
    revient();
}
void vaChercherGrand()
{
}
void ramene()
{
}
void rentre()
{
}
void initialiseMoteurs()
{
}
void initialiseCapteurs()
{
    SetSensorTouch(CAPTEUR_CONTACT);
    //SetSensorLowspeed(CAPTEUR_ULTRA);
    SetSensorColorRed(CAPTEUR_VISUEL);
}
void revient()
{
}
void echange(int& val1, int& val2)
{
    int temp = val1;
    val1 = val2;
    val2 = temp;
}
