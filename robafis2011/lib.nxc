#ifndef LIBNXC
#define LIBNXC



void stopMoteur()
{
    Off(MOTEUR_DROIT);
    Off(MOTEUR_GAUCHE);
}
task arretDurgence()
{
	while(true)
	{
	    int valeurContact = Sensor(CAPTEUR_CONTACT);
		if(valeurContact)
			StopAllTasks();
        Wait(50);
	}
}
task afficheCapteurs()
{
    TextOut(0, LCD_LINE2, "capteur de contact : ");
    TextOut(0, LCD_LINE4, "capteur ultrasons : ");
    TextOut(0, LCD_LINE6, "capteur visuel : ");

    int valeurUltra;
    int valeurContact;
    int valeurVisuel;

    while(true)
    {
        valeurUltra = SensorUS(CAPTEUR_ULTRA);
        valeurContact = Sensor(CAPTEUR_CONTACT);
        valeurVisuel =  Sensor(CAPTEUR_VISUEL);

        NumOut(20, LCD_LINE3, valeurContact);
        NumOut(20, LCD_LINE5, valeurUltra);
        NumOut(20, LCD_LINE7, valeurVisuel);

        Wait(100);
    }
}
bool attendDepart()
{
    /*
    while(!Sensor(CAPTEUR_CONTACT))
        Wait(50);
    while(Sensor(CAPTEUR_CONTACT))
        Wait(50);*/
    bool retour;

    TextOut(0, LCD_LINE2, "Appuyez à gauche si les petits sont dans la file 1.");
    TextOut(0, LCD_LINE4, "Appuyez à droite si les grands sont dans la file 1.");

    while(!ButtonPressed(BTNRIGHT, false) && !ButtonPressed(BTNLEFT, false))
    {
        retour = ButtonPressed(BTNLEFT, false);
        Wait(50);
    }
    ClearScreen();
    return retour;
}
void remontePince(int vitesse = VITESSE_PINCE, int valeur = ANGLE_PINCE)
{
    RotateMotor(PINCE, vitesse, valeur);
}
void descendPince(int vitesse = VITESSE_PINCE, int valeur = ANGLE_PINCE)
{
    remontePince(vitesse, -valeur);
}
void avancePendant(int temps, int vitesse)
{
    avanceSynchro(vitesse);
    Wait(temps);
    stopMoteur();
}
void arrete(byte moteur)
{
    tourne(moteur, MIN);
}
void reculePendant(int temps, int vitesse)
{
    avancePendant(temps, -vitesse);
}

void afficheErreur(string erreur)
{
    TextOut(0, LCD_LINE8, erreur);
}
void afficheErreurInt(int erreur)
{
    NumOut(0, LCD_LINE8, erreur);
}
void tourne(byte moteur, int vitesse)
{
    OnFwd(moteur, vitesse);
}
void initialiseCapteurs()
{
    SetSensorTouch(CAPTEUR_CONTACT);
    //SetSensorLowspeed(CAPTEUR_ULTRA);

    // Le capteur bleu est peut-être plus intéressant.
    SetSensorColorRed(CAPTEUR_VISUEL);
}
void revient()
{
}
void echange(int& val1, int& val2)
{
    int temp = val1;
    val1 = val2;
    val2 = temp;
}
int determineCouleur()
{


    return NOIRE;
}
int signe(float valeur)
{
    if(valeur < 0)
        return -1;
    return 1;
}
void avanceSynchro(int vitesse)
{
    OnFwdReg(MOTEURS, vitesse, OUT_REGMODE_SPEED);
}
void reculeSynchro(int vitesse)
{
    OnRevReg(MOTEURS, vitesse, OUT_REGMODE_SPEED);
}
void tourneDroite(int angle)
{
    RotateMotor(MOTEUR_GAUCHE, MAX, angle);
    RotateMotor(MOTEUR_DROIT, MAX, -angle);
}
void tourneGauche(int angle)
{
    tourneDroite(-angle);
}

#endif
