#ifndef MAINNXC
#define MAINNXC


#include "main.h"
#include "suiveur.h"
#include "suiveur.nxc"
#include "lib.h"
#include "lib.nxc"

/*
 Des choses ont été testé.
 L'idée c'est que peut-être on peut se passer d'un détecteur de couleur évolué et d'un système de localisation
 juste en suivant les lignes du bon coté.
 gestion des obstacles.

 pour compiler : nbc main.nxc
*/


task main()
{
    StartTask(mission);
}
task mission()
{
    verifieBatterie();



    initialiseCapteurs();
    StartTask(arretDUrgence);

    bool petitDansCentre1 = true;
    int passage = NON_CONNU;
    ClearScreen();
    StartTask(afficheCapteurs);

    cherchePetitRapide(true, petitDansCentre1);
    stockePetit();
    /*
    if(passage == NON_CONNU)
    {
        bool petitRecupere = cherchePetitRapide(true, petitDansCentre1);
        if(petitRecupere)
            stockePetit();
        bool grandRecupere = chercheGrandRapide(petitRecupere, petitDansCentre1);
        if(grandRecupere)
            stockeGrand();
        if(!petitRecupere && !grandRecupere)
        {
            afficheErreur("Le chemin est bloqué des 2 cotés, on abandonne.");
        }
        else if(!petitRecupere)
        {
            cherchePetitLent(true, petitDansCentre1);
            stockePetit();
        }
        else
        {
            chercheGrandLent(true, petitDansCentre1);
            stockeGrand();
        }
    }
    else if ((passage == DROITE && petitDansCentre1) || (passage==GAUCHE && !petitDansCentre1))
    {
        chercheGrandRapide(true, petitDansCentre1);
        stockeGrand();
        cherchePetitLent(true, petitDansCentre1);
        stockePetit();
    }
    else
    {
        cherchePetitRapide(true, petitDansCentre1);
        stockePetit();
        chercheGrandLent(true, petitDansCentre1);
        stockeGrand();
    }
*/
    StopAllTasks();
}
bool cherchePetitRapide(bool reussi, bool petitDansCentre1)
{
    if(petitDansCentre1)
        return rameneCentre1Rapide(reussi);
    else
        return rameneCentre2Rapide(reussi);
}
bool chercheGrandRapide(bool reussi, bool petitDansCentre1)
{
    return cherchePetitRapide(reussi, !petitDansCentre1);
}
bool cherchePetitLent(bool reussi, bool petitDansCentre1)
{
    if(petitDansCentre1)
        return rameneCentre1Lent(reussi);
    else
        return rameneCentre2Lent(reussi);
}
bool chercheGrandLent(bool reussi, bool petitDansCentre1)
{
    return cherchePetitLent(reussi, !petitDansCentre1);
}
bool rameneCentre1Rapide(bool reussi)
{
     StartTask(bloquePince);
    // On part de la zone de repos, orienté vers le sud
    if(reussi)
    {
        avancePendant(500, MAX);
        avanceJusquABlanc(MAX);
        tourneGauche(ANGLE_QUART_DE_TOUR/4);
        avanceJusquAPasBlanc(MAX);
        tourneGauche(ANGLE_QUART_DE_TOUR/4);
        avanceJusquANoir(MAX);
    }
    bool reussite = suitLaLigneEnAvancantCouleur(JAUNE, MAX, true);
    if(reussite)
    {
        avancePendant(500, MAX);
        tourneDroite(ANGLE_QUART_DE_TOUR*1.1);
       // avanceJusquANoir(MAX);
        stopMoteur();
        //StopTask(bloquePince);

        descendPince(MAX);
        suitLaLigneEnAvancantDistance(DISTANCE_OBSTACLE, MAX*0.6, true);
        //stopMoteur();
        //suitLaLigneEnAvancant(2000, MAX, true);
        stopMoteur();
        remontePince();
        tourneDroite(2*ANGLE_QUART_DE_TOUR*0.9, MAX);
        suitLaLigneEnAvancantCouleur(VERT, MAX, false);
        avancePendant(500, MAX);
        tourneDroite(ANGLE_QUART_DE_TOUR);
        avanceJusquANoir(MAX);
        avancePendant(1500, MAX);
    }
    else
    {
        demiTour(MAX);
        suitLaLigneEnAvancantCouleur(VERT, MAX, false);
        milieuLigne(false);
    }
    return reussite;
}
bool rameneCentre2Rapide(bool reussi)
{
    // On part de la zone de repos, orienté vers le sud
    if(reussi)
    {
        avancePendant(500, MAX);
        tourneDroite(ANGLE_QUART_DE_TOUR/4);
        avanceJusquAPasBlanc(MAX);
    }
    bool reussite = suitLaLigneEnAvancantCouleur(JAUNE, MAX, false);
    if(reussite)
    {
        stopMoteur();
        descendPince(MAX);
        suitLaLigneEnAvancantDistance(20, MAX, false);
        milieuLigne(false);
        suitLaLigneEnAvancantDistance(15, MAX, true);
        //stopMoteur();
        suitLaLigneEnAvancant(2000, MAX, true);
        stopMoteur();
        remontePince();
        demiTour(MAX);
        suitLaLigneEnAvancantCouleur(VERT, MAX, true);
        tourneGauche(ANGLE_QUART_DE_TOUR);
        avanceJusquANoir(MAX);
        avancePendant(200, MAX);
    }
    else
    {
        demiTour(MAX);
        suitLaLigneEnAvancantCouleur(VERT, MAX, true);
        milieuLigne(true);
    }
    return reussite;
}
bool rameneCentre1Lent(bool reussi)
{
    // On part de la zone de repos, orienté ves le sud
    if(reussi)
    {
        avancePendant(500, MAX);
        tourneDroite(ANGLE_QUART_DE_TOUR/4);
        avanceJusquAPasBlanc(MAX);
    }
    suitLaLigneEnAvancantCouleur(JAUNE, MAX, true);
    suitLaLigneEnAvancant(2000, MAX, true);
    milieuLigne(true);
    suitLaLigneEnAvancantCouleur(JAUNE, MAX, false);
    suitLaLigneEnAvancantDistance(20, MAX, false);
    stopMoteur();
    descendPince(MAX);
    milieuLigne(false);
    suitLaLigneEnAvancantDistance(15, MAX, true);
    suitLaLigneEnAvancant(2000, MAX, true);
    stopMoteur();
    remontePince();
    demiTour(MAX);
    suitLaLigneEnAvancantCouleur(JAUNE, MAX, true);
    suitLaLigneEnAvancant(2000, MAX, true);
    milieuLigne(true);
    suitLaLigneEnAvancantCouleur(VERT, MAX, false);
    tourneGauche(ANGLE_QUART_DE_TOUR);
    avanceJusquANoir(MAX);
    avancePendant(200, MAX);

}
bool rameneCentre2Lent(bool reussi)
{
    // On part de la zone de repos, orienté ves le sud
    if(reussi)
    {
        avancePendant(500, MAX);
        tourneGauche(ANGLE_QUART_DE_TOUR/4);
        avanceJusquAPasBlanc(MAX);
    }
    suitLaLigneEnAvancantCouleur(JAUNE, MAX, false);
    suitLaLigneEnAvancant(2000, MAX, false);
    milieuLigne(false);
    suitLaLigneEnAvancantCouleur(JAUNE, MAX, true);
    suitLaLigneEnAvancantDistance(20, MAX, true);
    stopMoteur();
    descendPince(MAX);
    suitLaLigneEnAvancantDistance(15, MAX, true);
    suitLaLigneEnAvancant(2000, MAX, true);
    stopMoteur();
    remontePince();
    demiTour(MAX);
    suitLaLigneEnAvancantCouleur(JAUNE, MAX, false);
    suitLaLigneEnAvancant(2000, MAX, false);
    milieuLigne(false);
    suitLaLigneEnAvancantCouleur(VERT, MAX, true);
    tourneDroite(ANGLE_QUART_DE_TOUR);
    avanceJusquANoir(MAX);
    avancePendant(200, MAX);
}
void stockePetit()
{
    // On part de la zone de repos, orienté vers le nord
    tourneDroite(ANGLE_QUART_DE_TOUR);
    avanceJusquABlanc(MAX);
    avanceJusquAPasBlanc(MAX);
    avancePendant(500, MAX);
    stopMoteur();
    descendPince(ANGLE_PINCE);
    reculeJusquABlanc(MAX);
    reculeJusquANoir(MAX);
    remontePince(ANGLE_PINCE);
    tourneDroite(ANGLE_QUART_DE_TOUR);
}
void stockeGrand()
{
    // On part de la zone de repos, orienté vers le nord
    tourneGauche(ANGLE_QUART_DE_TOUR);
    avanceJusquABlanc(MAX, ROUGE);
    avanceJusquAPasBlanc(MAX, ROUGE);
    avancePendant(500, MAX);
    stopMoteur();
    descendPince(ANGLE_PINCE);
    reculeJusquABlanc(MAX, ROUGE);
    reculeJusquANoir(MAX);
    stopMoteur();
    remontePince(ANGLE_PINCE);
    tourneGauche(ANGLE_QUART_DE_TOUR);
}



#endif
