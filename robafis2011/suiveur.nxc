#ifndef SUIVEURNXC
#define SUIVEURNXC

/*
Capteur rouge :
50      -> 10
blanc   -> noir


*/

#include "suiveur.h"
#include "main.h"
#include "lib.h"

void suitLaLigneEnAvancant(int temps, int vitesse, bool droite = true) // à priori à droite de la ligne
{
    int tempsDepart = CurrentTick();
    int tempsPasse = 0;
    unsigned int valeurVisuel[];

    /*Capteur rouge :
50      -> 10
blanc   -> noir
*/
    tourne(MOTEUR_DROIT, vitesse);
    tourne(MOTEUR_GAUCHE, vitesse);
    //Wait(500);*/
    while(tempsPasse < temps)
    {
        afficheErreurInt(tempsPasse);
        ReadSensorColorRaw (CAPTEUR_VISUEL, valeurVisuel)
        if(!determineVitesseMoteur(valeurVisuel, GRIS, vitesse, droite))
            afficheErreur("perte de la ligne");
        // On recalcule le temps passé à chaque tour.
        tempsPasse = CurrentTick() - tempsDepart;
    }
    //stopMoteur();

}
// permet de suivre une ligne pendant un certain nombre de tournant.
// Si il y a un obstacle, false est renvoyé et nbTournant vaut le nombre de tournant avant l'obstacle
bool suitLaLigneEnAvancantCouleur(int couleur, int vitesse, bool droite = true, bool detection = false)
{
    unsigned int tabVisuel[];
    int tempsDepart = CurrentTick();
    int tempsPasse = 0;
    /*Capteur rouge :
50      -> 10
blanc   -> noir
*/
    int valeurUltra = SensorUS(CAPTEUR_ULTRA);

    tourne(MOTEUR_DROIT, vitesse);
    tourne(MOTEUR_GAUCHE, vitesse);
    while(valeurUltra > DISTANCE_OBSTACLE)
    {
        //valeurVisuel =  Sensor(CAPTEUR_VISUEL);
        ReadSensorColorRaw(CAPTEUR_VISUEL, tabVisuel)
        int valBleu = tabVisuel[INPUT_BLUE];
        int valRouge = tabVisuel[INPUT_RED];
        int valVert= tabVisuel[INPUT_GREEN];
        int valeurVisuel = valBleu;

        // On recalcule le temps passé à chaque tour pour éviter de compter un tournant au démarrage.
        tempsPasse = CurrentTick() - tempsDepart;

        // On recalcule le nombre de tournant à chaque tour.

        if(valeurVisuel < NOIR+40)
        {
            afficheErreurInt(valeurVisuel);
            if(valRouge>110 && valRouge < 200 && valVert > 60 && valVert < 150 && valBleu < 90)
            {
                if(couleur == JAUNE)
                {
                    stopMoteur();
                    return true;
                }

            }
            else if(valRouge < 100 && valBleu < 70 && valVert > 120)
            {
                if(couleur == VERT)
                {
                    stopMoteur();
                    return true;
                }
            }
            tempsDepart = CurrentTick();
        }

        if(!determineVitesseMoteur(valeurVisuel, couleur, vitesse, droite))
            afficheErreur("perte de la ligne");


        if(detection)
        {
            valeurUltra = SensorUS(CAPTEUR_ULTRA);
        }
        else
            valeurUltra = 100;

    }

    stopMoteur();
    return false;

}
// permet de suivre la ligne juqu'à une certaine distance d'un obstacle
void suitLaLigneEnAvancantDistance(int distance, int vitesse, bool droite = true) // à priori à droite de la ligne
{

    unsigned int valeurVisuel[];
    int valeurUltra = SensorUS(CAPTEUR_ULTRA);
    /*Capteur rouge :
50      -> 10
blanc   -> noir
*/

    tourne(MOTEUR_DROIT, vitesse);
    tourne(MOTEUR_GAUCHE, vitesse);
    while(valeurUltra > distance)
    {
        afficheErreurInt(valeurUltra);
        ReadSensorColorRaw (CAPTEUR_VISUEL, valeurVisuel)
        if(!determineVitesseMoteur(valeurVisuel, GRIS, vitesse, droite))
            afficheErreur("perte de la ligne");
        // On récupère la distance actuelle à chaque tour
        valeurUltra = SensorUS(CAPTEUR_ULTRA);
    }
    stopMoteur();

}
// envoie aux moteurs les ordres nécessaires pour suivre la ligne. remonte les informations de dépassement via
// les variables depassementBlanc et depassementNoir
// Le fait de faire tourner les moteurs à l'envers si nécessaire permettra peut-être de suivre les
// lignes en marche arrière et améliore de toute facon le suivi.
// les commentaires sont écrits dans le cas droite = true
bool determineVitesseMoteur(unsigned int valeurVisuel, int couleur, int vitesse, bool droite)
{
    // valeurs à ajuster pour que le robot aille plus vite
    int valeurNoir = 0.5*(NOIR+BLANC) - TOLERANCE_SUIVEUR; // proche du noir
    int valeurBlanc = 0.5*(NOIR+BLANC) + TOLERANCE_SUIVEUR; // proche du blanc

    if(valeurVisuel <= valeurBlanc && valeurVisuel >= valeurNoir)
    {
        // On va à fond.
        tourne(MOTEUR_DROIT, vitesse);
        tourne(MOTEUR_GAUCHE, vitesse);
    }
    else
    {
        corrige(vitesse, valeurVisuel, valeurNoir, valeurBlanc, droite);

    }

    if(valeurVisuel < (NOIR-40) || valeurVisuel > (BLANC+40))
            return false;
    return true;

}
void corrige(float vitesse, float valeurVisuel, float valeurNoir, float valeurBlanc, int droite)
{
    if(valeurVisuel>BLANC)
        valeurVisuel = BLANC;
    else if (valeurVisuel < NOIR)
        valeurVisuel = NOIR;

    if (valeurVisuel < valeurNoir) // On est dans le noir , donc trop à gauche, le moteur droit ralentit
    {
        // On corrige proportionnellement.
        float coeff = (2*valeurVisuel - (valeurNoir+NOIR))/(valeurNoir - NOIR);
        // Le moteur n'avance pas entre -20 et 20, on n'utilise pas ces valeurs :
        coeff += signe(coeff)*0.25;
        coeff /= 1.25;
        if(signe(coeff)==-1)
            coeff*=(MAX/vitesse);
        if(droite)
        {
            tourne(MOTEUR_GAUCHE, vitesse);
            tourne(MOTEUR_DROIT, coeff * vitesse);
        }
        else
        {
            tourne(MOTEUR_DROIT, vitesse);
            tourne(MOTEUR_GAUCHE, coeff * vitesse);
        }
    }
    else if (valeurVisuel > valeurBlanc) // On est dans le blanc, donc trop à droite, le moteur gauche ralentit
    {
        float coeff = (2*valeurVisuel - (valeurBlanc+BLANC))/(valeurBlanc - BLANC);
        // Le moteur n'avance pas entre -20 et 20, on n'utilise pas ces valeurs :
        coeff += signe(coeff)*0.25;
        coeff /= 1.25;
        if(signe(coeff)==-1)
            coeff*=(MAX/vitesse);
        if(droite)
        {
            tourne(MOTEUR_DROIT, vitesse);
            tourne(MOTEUR_GAUCHE, coeff * vitesse);
        }
        else
        {
            tourne(MOTEUR_GAUCHE, vitesse);
            tourne(MOTEUR_DROIT, coeff * vitesse);
        }
    }

}
void suitLaLigneEnReculant(int temps, int vitesse, bool droite = true) // à droite de la ligne
{
    suitLaLigneEnAvancant(temps, -vitesse, droite);
}

// A ne pas utiliser si il n'y a pas de noir devant.
void avanceJusquANoir(int vitesse, int couleur = BLEU)
{
    avanceSynchro(vitesse);
    while(recupereCouleur(couleur) > NOIR + 40)
        ;
    stopMoteur();
}
void reculeJusquANoir(int vitesse, int couleur = BLEU)
{
    avanceJusquANoir(-vitesse, couleur);
}
void avanceJusquAPasBlanc(int vitesse, int couleur = BLEU) // Rouge ou bleu
{
    avanceSynchro(vitesse);

    while(recupereCouleur(couleur) > BLANC - 40)
        ;
    stopMoteur();
}
void avanceJusquABlanc(int vitesse, int couleur = BLEU)
{
    avanceSynchro(vitesse);

    while(recupereCouleur(couleur) < BLANC - 40)
        ;
    stopMoteur();
}
void reculeJusquABlanc(int vitesse, int couleur = BLEU)
{
    avanceJusquABlanc(-vitesse, couleur);
}
// A ne pas utiliser si on n'est pas près d'une ligne
void chercheLigne(int vitesse)
{
    demiTour(vitesse);
}
// A ne pas utiliser si on n'est pas sur une ligne
void demiTour(int vitesse)
{

    tourne(MOTEUR_DROIT, vitesse);
    tourne(MOTEUR_GAUCHE, -vitesse);

    while(Sensor(CAPTEUR_VISUEL) < BLANC -40)
        ;
    while(Sensor(CAPTEUR_VISUEL) > NOIR + 60)
        ;
    // A priori inutile.
    /*while(Sensor(CAPTEUR_VISUEL) < NOIR + 10)
        ;*/

    stopMoteur();

}
// sert à changer entre le suivi à gauche et le suivi à droite
// droite vaut true si on vient de droite et false si on vient de gauche.
void milieuLigne(bool droite)
{
    if(droite)
    {
        tourne(MOTEUR_DROIT, MAX);
        tourne(MOTEUR_GAUCHE, -MAX);
    }
    else
    {
        tourne(MOTEUR_GAUCHE, MAX);
        tourne(MOTEUR_DROIT, -MAX);
    }
    while(Sensor(CAPTEUR_VISUEL) > NOIR + 40)
        ;
    stopMoteur();
}

#endif
