#ifndef LIBNXC
#define LIBNXC



void stopMoteur()
{
    Off(MOTEUR_DROIT);
    Off(MOTEUR_GAUCHE);
}
task arretDUrgence()
{

	/*while(true)
	{

	    int valeurContact = Sensor(CAPTEUR_CONTACT);
		if(valeurContact)
			StopAllTasks();
        Wait(100);
	}*/
}
task afficheCapteurs()
{
    ClearScreen();
    TextOut(0, LCD_LINE1, "capteur ultrasons : ");
    TextOut(0, LCD_LINE2, "               ");
    TextOut(0, LCD_LINE3, "Rouge");
    TextOut(0, LCD_LINE4, "                ");
    TextOut(0, LCD_LINE5, "Vert");
    TextOut(0, LCD_LINE6, "                ");
    TextOut(0, LCD_LINE7, "Bleu");
    TextOut(0, LCD_LINE8, "                ");

    int valeurUltra;
    unsigned int valeurVisuel[];

    while(true)
    {
        TextOut(0, LCD_LINE2, "               ");
        TextOut(0, LCD_LINE2, "               ");
        TextOut(0, LCD_LINE6, "                ");
        TextOut(0, LCD_LINE8, "                ");

        ReadSensorColorRaw (CAPTEUR_VISUEL, valeurVisuel)
        valeurUltra = SensorUS(CAPTEUR_ULTRA);

        NumOut(0, LCD_LINE2, valeurUltra);
        NumOut(0, LCD_LINE4, valeurVisuel[INPUT_RED]);
        NumOut(0, LCD_LINE6, valeurVisuel[INPUT_GREEN]);
        NumOut(0, LCD_LINE8, valeurVisuel[INPUT_BLUE]);

        Wait(200);
    }
}
bool recupereTypeFile()
{
    /*
    while(!Sensor(CAPTEUR_CONTACT))
        Wait(50);
    while(Sensor(CAPTEUR_CONTACT))
        Wait(50);*/
    bool retour;

    TextOut(0, LCD_LINE1, "Appuyez à gauche");
    TextOut(0, LCD_LINE2, "si les petits sont");
    TextOut(0, LCD_LINE3, "dans la file 1.(gauche)");
    TextOut(0, LCD_LINE5, "Appuyez à droite");
    TextOut(0, LCD_LINE6, "si les grands sont");
    TextOut(0, LCD_LINE7, "dans la file 1.(gauche)");

    while(!ButtonPressed(BTNRIGHT, false) && !ButtonPressed(BTNLEFT, false))
    {
        retour = ButtonPressed(BTNLEFT, false);
        Wait(50);
    }
    ClearScreen();
    return retour;
}
int recupereChoixDirection()
{
    /*
    while(!Sensor(CAPTEUR_CONTACT))
        Wait(50);
    while(Sensor(CAPTEUR_CONTACT))
        Wait(50);*/

    TextOut(0, LCD_LINE1, "passage à droite :");
    TextOut(0, LCD_LINE2, "bouton droit");
    TextOut(0, LCD_LINE4, "passage à gauche :");
    TextOut(0, LCD_LINE5, "bouton gauche");
    TextOut(0, LCD_LINE7, "pas de préférence");
    TextOut(0, LCD_LINE8, "bouton milieu");

    while(!ButtonPressed(BTNRIGHT, false) && !ButtonPressed(BTNLEFT, false) && !ButtonPressed(BTNCENTER, false))
    {
        if(ButtonPressed(BTNRIGHT, false))
            return DROITE;
        else if (ButtonPressed(BTNLEFT, false))
            return GAUCHE;
        else if (ButtonPressed(BTNCENTER, false))
            return NON_CONNU;
        Wait(50);
    }
}
task bloquePince()
{
    tourne(PINCE, 0);
    Wait(MIN_1);
    Wait(MIN_1);
    Wait(MIN_1);
    Wait(MIN_1);
}
void remontePince(int vitesse = VITESSE_PINCE, int valeur = ANGLE_PINCE)
{
    tourne(PINCE, -VITESSE_PINCE);
    Wait(TEMPS_PINCE);
    tourne(PINCE, 0);
}
void descendPince(int vitesse = VITESSE_PINCE, int valeur = ANGLE_PINCE)
{
    tourne(PINCE, VITESSE_PINCE);
    Wait(TEMPS_PINCE);
    tourne(PINCE, 0);
}
void avancePendant(int temps, int vitesse)
{
    avanceSynchro(vitesse);
    Wait(temps);
    stopMoteur();
}
void arrete(byte moteur)
{
    tourne(moteur, MIN);
}
void reculePendant(int temps, int vitesse)
{
    avancePendant(temps, -vitesse);
}

void afficheErreur(string erreur)
{
    TextOut(0, LCD_LINE8, erreur);
}
void afficheErreurInt(int erreur)
{
    NumOut(0, LCD_LINE8, erreur);
}
void tourne(byte moteur, int vitesse)
{
    OnFwd(moteur, vitesse);
}
void initialiseCapteurs()
{
   // SetSensorTouch(CAPTEUR_CONTACT);
    SetSensorLowspeed(CAPTEUR_ULTRA);

    // Le capteur bleu est plus intéressant.
    SetSensorColorFull(CAPTEUR_VISUEL);
}
void revient()
{
}
void echange(int& val1, int& val2)
{
    int temp = val1;
    val1 = val2;
    val2 = temp;
}

float signe(float valeur)
{
    if(valeur < 0)
        return -1;
    return 1;
}
void avanceSynchro(int vitesse)
{
    OnFwdReg(MOTEURS, vitesse, OUT_REGMODE_SYNC);
}
void reculeSynchro(int vitesse)
{
    OnRevReg(MOTEURS, vitesse, OUT_REGMODE_SYNC);
}
void tourneDroite(int angle, int vitesse = MAX)
{
    RotateMotorEx(MOTEURS, vitesse*0.6, angle, -100, true, true);
}
void tourneGauche(int angle)
{
    RotateMotorEx(MOTEURS, MAX*0.6, angle*BUG, 100, true, true);
}
void verifieBatterie()
{
    unsigned int millivolts = BatteryLevel();
    if(millivolts < 6900)
    {
            PlayTone(2000, 3000);
            PlayTone(400, 500);
            afficheErreur("batterie faible");
    }
}
int recupereBleu()
{
    unsigned int tabVisuel[];
    ReadSensorColorRaw(CAPTEUR_VISUEL, tabVisuel);
    return tabVisuel[INPUT_BLUE];
}
int recupereRouge()
{
    unsigned int tabVisuel[];
    ReadSensorColorRaw(CAPTEUR_VISUEL, tabVisuel);
    return tabVisuel[INPUT_RED];
}
int recupereCouleur(int coul)
{
    if(coul==BLEU)
        return recupereBleu();
    else
        return recupereRouge();
}
#endif
